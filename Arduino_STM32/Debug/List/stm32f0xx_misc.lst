###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        04/Aug/2016  01:13:31
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Pranav\Documents\IAR Embedded
#        Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Libraries\STM32F0xx_StdPeriph_Driver\src\stm32f0xx_misc.c
#    Command line =  
#        "C:\Users\Pranav\Documents\IAR Embedded
#        Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Libraries\STM32F0xx_StdPeriph_Driver\src\stm32f0xx_misc.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F0XX -D USE_IAR_STM32F0XX_KSK -D
#        USE_DEFAULT_TIMEOUT_CALLBACK -lc "C:\Users\Pranav\Documents\IAR
#        Embedded
#        Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Arduino_STM32\Debug\List\"
#        -o "C:\Users\Pranav\Documents\IAR Embedded
#        Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Arduino_STM32\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Full.h"
#        -I "C:\Users\Pranav\Documents\IAR Embedded
#        Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Arduino_STM32\" -I
#        "C:\Users\Pranav\Documents\IAR Embedded
#        Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Arduino_STM32\..\Libraries\CMSIS\Device\ST\STM32F0xx\Include\"
#        -I "C:\Users\Pranav\Documents\IAR Embedded
#        Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Arduino_STM32\..\Libraries\STM32F0xx_StdPeriph_Driver\inc\"
#        -I "C:\Users\Pranav\Documents\IAR Embedded
#        Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Arduino_STM32\..\Libraries\STM32F0xx_CPAL_Driver\inc\"
#        -I "C:\Users\Pranav\Documents\IAR Embedded
#        Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Arduino_STM32\..\Utilities\IAR_STM32F0xx_KSK\"
#        -I "C:\Users\Pranav\Documents\IAR Embedded
#        Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Arduino_STM32\..\Utilities\IAR_STM32F0xx_KSK\HD44780_Framework\"
#        -I "C:\Users\Pranav\Documents\IAR Embedded
#        Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Arduino_STM32\..\Utilities\IAR_STM32F0xx_KSK\Acc\"
#        -On -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\Pranav\Documents\IAR Embedded
#        Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Arduino_STM32\Debug\List\stm32f0xx_misc.lst
#    Object file  =  
#        C:\Users\Pranav\Documents\IAR Embedded
#        Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Arduino_STM32\Debug\Obj\stm32f0xx_misc.o
#
###############################################################################

C:\Users\Pranav\Documents\IAR Embedded Workbench\IAR-STM32F051R8-SK\Arduino_STM32\Libraries\STM32F0xx_StdPeriph_Driver\src\stm32f0xx_misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f0xx_misc.c
      4            * @author  MCD Application Team
      5            * @version V1.3.0
      6            * @date    16-January-2014
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     13            *
     14            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     15            * You may not use this file except in compliance with the License.
     16            * You may obtain a copy of the License at:
     17            *
     18            *        http://www.st.com/software_license_agreement_liberty_v2
     19            *
     20            * Unless required by applicable law or agreed to in writing, software 
     21            * distributed under the License is distributed on an "AS IS" BASIS, 
     22            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     23            * See the License for the specific language governing permissions and
     24            * limitations under the License.
     25            *
     26            ******************************************************************************
     27            */
     28          
     29          /* Includes ------------------------------------------------------------------*/
     30          #include "stm32f0xx_misc.h"
     31          
     32          /** @addtogroup STM32F0xx_StdPeriph_Driver
     33            * @{
     34            */
     35          
     36          /** @defgroup MISC 
     37            * @brief MISC driver modules
     38            * @{
     39            */
     40          
     41          /* Private typedef -----------------------------------------------------------*/
     42          /* Private define ------------------------------------------------------------*/
     43          /* Private macro -------------------------------------------------------------*/
     44          /* Private variables ---------------------------------------------------------*/
     45          /* Private function prototypes -----------------------------------------------*/
     46          /* Private functions ---------------------------------------------------------*/
     47          
     48          /** @defgroup MISC_Private_Functions
     49            * @{
     50            */
     51          /**
     52            *
     53          @verbatim
     54           *******************************************************************************
     55                             ##### Interrupts configuration functions #####
     56           *******************************************************************************
     57              [..] This section provide functions allowing to configure the NVIC interrupts
     58                  (IRQ). The Cortex-M0 exceptions are managed by CMSIS functions.
     59                   (#) Enable and Configure the priority of the selected IRQ Channels. 
     60                       The priority can be 0..3. 
     61          
     62                  -@- Lower priority values gives higher priority.
     63                  -@- Priority Order:
     64                      (#@) Lowest priority.
     65                      (#@) Lowest hardware priority (IRQn position).  
     66            
     67          @endverbatim
     68          */
     69          
     70          /**
     71            * @brief  Initializes the NVIC peripheral according to the specified
     72            *         parameters in the NVIC_InitStruct.
     73            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
     74            *         the configuration information for the specified NVIC peripheral.
     75            * @retval None
     76            */
     77          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
     78          {
     79            uint32_t tmppriority = 0x00;
     80            
     81            /* Check the parameters */
     82            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
     83            assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
     84              
     85            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
     86            {
     87              /* Compute the Corresponding IRQ Priority --------------------------------*/    
     88              tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
     89              tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
     90              tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
     91              
     92              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
     93              
     94              /* Enable the Selected IRQ Channels --------------------------------------*/
     95              NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
     96            }
     97            else
     98            {
     99              /* Disable the Selected IRQ Channels -------------------------------------*/
    100              NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    101            }
    102          }
    103          
    104          /**
    105            * @brief  Selects the condition for the system to enter low power mode.
    106            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    107            *          This parameter can be one of the following values:
    108            *            @arg NVIC_LP_SEVONPEND: Low Power SEV on Pend.
    109            *            @arg NVIC_LP_SLEEPDEEP: Low Power DEEPSLEEP request.
    110            *            @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
    111            * @param  NewState: new state of LP condition. 
    112            *          This parameter can be: ENABLE or DISABLE.
    113            * @retval None
    114            */
    115          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    116          {
    117            /* Check the parameters */
    118            assert_param(IS_NVIC_LP(LowPowerMode));
    119            
    120            assert_param(IS_FUNCTIONAL_STATE(NewState));  
    121            
    122            if (NewState != DISABLE)
    123            {
    124              SCB->SCR |= LowPowerMode;
    125            }
    126            else
    127            {
    128              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    129            }
    130          }
    131          
    132          /**
    133            * @brief  Configures the SysTick clock source.
    134            * @param  SysTick_CLKSource: specifies the SysTick clock source.
    135            *          This parameter can be one of the following values:
    136            *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
    137            *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
    138            * @retval None
    139            */
    140          void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
    141          {
    142            /* Check the parameters */
    143            assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
    144            
    145            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    146            {
    147              SysTick->CTRL |= SysTick_CLKSource_HCLK;
    148            }
    149            else
    150            {
    151              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    152            }
    153          }
    154          
    155          /**
    156            * @}
    157            */
    158          
    159          /**
    160            * @}
    161            */
    162          
    163          /**
    164            * @}
    165            */
    166          
    167          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   NVIC_Init
       4   NVIC_SystemLPConfig
       4   SysTick_CLKSourceConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
     106  NVIC_Init
      36  NVIC_SystemLPConfig
      34  SysTick_CLKSourceConfig

 
 196 bytes in section .text
 
 196 bytes of CODE memory

Errors: none
Warnings: none
